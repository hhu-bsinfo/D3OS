[env]
BOOTLOADER_DIRECTORY = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/loader"
INITRD_DIRECTORY = "${BOOTLOADER_DIRECTORY}/initrd"
OVMF_URL = "https://retrage.github.io/edk2-nightly/bin/RELEASEX64_OVMF.fd"
TOWBOOT_VERSION = "0.9.0"
TOWBOOT_URL = "https://github.com/hhuOS/towboot/releases/download/v${TOWBOOT_VERSION}/towbootctl-v${TOWBOOT_VERSION}"
LINKER = "ld"
LINKER_MAC = "x86_64-elf-ld"

[tasks.default]
alias = "qemu"

# Run tasks

[tasks.debug]
command = "qemu-system-x86_64"
dependencies = [ "debug-signal-vscode" ]
args = [
    # Base machine configuration
    "-machine", "q35,nvdimm=on,pcspk-audiodev=audio0",
    "-m", "128M,slots=2,maxmem=1G",
    "-cpu", "qemu64",
    "-bios", "RELEASEX64_OVMF.fd",
    "-boot", "d",
    "-vga", "std",
    "-rtc", "base=localtime",
    "-serial", "stdio",

    # Hard disk drive configuration
    "-drive", "driver=raw,node-name=boot,file.driver=file,file.filename=d3os.img",

    # NVDIMM configuration
    "-device", "nvdimm,memdev=mem1,id=nv1,label-size=2M",
    "-object", "memory-backend-file,id=mem1,share=on,mem-path=nvdimm0,size=16M",

    # Network configuration
    "-nic", "model=rtl8139,id=rtl8139,hostfwd=udp::1797-:1797",
    "-object", "filter-dump,id=filter1,netdev=rtl8139,file=rtl8139.dump",

    # Audio configuration (Using pulse audio for Linux)
    "-audiodev", "id=audio0,driver=pa",

    # Debugging configuration
    "-S", "-gdb", "tcp::1234"
]

[tasks.debug.mac]
args = [
    # Base machine configuration
    "-machine", "q35,nvdimm=on,pcspk-audiodev=audio0",
    "-m", "128M,slots=2,maxmem=1G",
    "-cpu", "qemu64",
    "-bios", "RELEASEX64_OVMF.fd",
    "-boot", "d",
    "-vga", "std",
    "-rtc", "base=localtime",
    "-serial", "stdio",

    # Hard disk drive configuration
    "-drive", "driver=raw,node-name=boot,file.driver=file,file.filename=d3os.img",

    # NVDIMM configuration
    "-device", "nvdimm,memdev=mem1,id=nv1,label-size=2M",
    "-object", "memory-backend-file,id=mem1,share=on,mem-path=nvdimm0,size=16M",

    # Network configuration
    "-nic", "model=rtl8139,id=rtl8139,hostfwd=udp::1797-:1797",
    "-object", "filter-dump,id=filter1,netdev=rtl8139,file=rtl8139.dump",

    # Audio configuration (Using coreaduio for macOS)
    "-audiodev", "id=audio0,driver=coreaudio",

    # Debugging configuration
    "-S", "-gdb", "tcp::1234"
]

[tasks.debug-signal-vscode]
command = "echo"
args = [ "Ready to debug" ]
dependencies = [ "image", "ovmf" ]

[tasks.qemu]
command = "qemu-system-x86_64"
dependencies = [ "image", "ovmf" ]
args = [
    # Base machine configuration
    "-machine", "q35,nvdimm=on,pcspk-audiodev=audio0",
    "-m", "128M,slots=2,maxmem=1G",
    "-cpu", "qemu64",
    "-bios", "RELEASEX64_OVMF.fd",
    "-boot", "d",
    "-vga", "std",
    "-rtc", "base=localtime",
    "-serial", "stdio",

    # Hard disk drive configuration
    "-drive", "driver=raw,node-name=boot,file.driver=file,file.filename=d3os.img",

    # NVDIMM configuration
    "-device", "nvdimm,memdev=mem1,id=nv1,label-size=2M",
    "-object", "memory-backend-file,id=mem1,share=on,mem-path=nvdimm0,size=16M",

    # Network configuration
    "-nic", "model=rtl8139,id=rtl8139,hostfwd=udp::1797-:1797",
    "-object", "filter-dump,id=filter1,netdev=rtl8139,file=rtl8139.dump",

    # Audio configuration (Using pulse audio for Linux)
    "-audiodev", "id=audio0,driver=pa",
]

[tasks.qemu.mac]
args = [
    # Base machine configuration
    "-machine", "q35,nvdimm=on,pcspk-audiodev=audio0",
    "-m", "128M,slots=2,maxmem=1G",
    "-cpu", "qemu64",
    "-bios", "RELEASEX64_OVMF.fd",
    "-boot", "d",
    "-vga", "std",
    "-rtc", "base=localtime",
    "-serial", "stdio",

    # Hard disk drive configuration
    "-drive", "driver=raw,node-name=boot,file.driver=file,file.filename=d3os.img",

    # NVDIMM configuration
    "-device", "nvdimm,memdev=mem1,id=nv1,label-size=2M",
    "-object", "memory-backend-file,id=mem1,share=on,mem-path=nvdimm0,size=16M",

    # Network configuration
    "-nic", "model=rtl8139,id=rtl8139,hostfwd=udp::1797-:1797",
    "-object", "filter-dump,id=filter1,netdev=rtl8139,file=rtl8139.dump",

    # Audio configuration (Using coreaduio for macOS)
    "-audiodev", "id=audio0,driver=coreaudio",
]

[tasks.ovmf]
command = "wget"
args = [ "-N", "${OVMF_URL}" ]

# Build tasks

[tasks.link-members]
run_task = { name = "link", fork = true }
dependencies = [ "create-initrd-directory" ]

[tasks.create-initrd-directory]
command = "mkdir"
args = [ "-p", "${INITRD_DIRECTORY}" ]
condition = { files_not_exist = [ "${INITRD_DIRECTORY}" ] }

[tasks.initrd]
cwd = "${INITRD_DIRECTORY}"
command = "tar"
args = [ "-cf", "${BOOTLOADER_DIRECTORY}/initrd.tar", "hello", "shell", "uptime", "date" ]
dependencies = [ "link-members" ]
condition = { files_modified = { input = [ "${INITRD_DIRECTORY}/*" ], output = [ "${BOOTLOADER_DIRECTORY}/initrd.tar" ] } }

[tasks.initrd.mac]
cwd = "${INITRD_DIRECTORY}"
command = "gtar"

[tasks.image]
cwd = "${BOOTLOADER_DIRECTORY}"
command = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/towbootctl"
args = [ "image", "--target", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/d3os.img", "--", "-config", "towboot.toml"]
dependencies = [ "link-members", "initrd", "towbootctl" ]
condition = { files_modified = { input = [ "${BOOTLOADER_DIRECTORY}/initrd.tar", "${BOOTLOADER_DIRECTORY}/kernel.elf", "${BOOTLOADER_DIRECTORY}/towboot.toml" ], output = [ "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/d3os.img" ] } }

[tasks.towbootctl]
script = '''
wget -O towbootctl "${TOWBOOT_URL}-x86_64-linux"
chmod +x towbootctl
'''
condition = { files_not_exist = [ "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/towbootctl" ] }

[tasks.towbootctl.mac]
script = '''
wget -O towbootctl "${TOWBOOT_URL}-macos.-macos"
chmod +x towbootctl
'''

# Cleanup tasks

[tasks.clean]
dependencies = [ "clean-workspace", "clean-members" ]

[tasks.clean-workspace]
command = "rm"
args = [ "-rf",
    "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/d3os.img",
    "${BOOTLOADER_DIRECTORY}/kernel.elf",
    "${BOOTLOADER_DIRECTORY}/initrd.tar",
    "${INITRD_DIRECTORY}",
    "RELEASEX64_OVMF.fd",
    "towbootctl" ]

[tasks.clean-members]
run_task = { name = "clean", fork = true }
